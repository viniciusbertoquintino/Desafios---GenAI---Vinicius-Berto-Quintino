"""
Sistema de Mem√≥ria para o Agente de Reembolso
==============================================

Este m√≥dulo implementa duas tipos de mem√≥ria:
1. Mem√≥ria de Curto Prazo (buffer): guarda as √∫ltimas N mensagens
2. Mem√≥ria de Sess√£o: guarda todo o hist√≥rico da conversa

"""

from datetime import datetime
from typing import List, Dict
import json


class MemoriaAgente:
    """
    Classe que gerencia a mem√≥ria do agente.
    
    Atributos:
        - memoria_curto_prazo: lista com as √∫ltimas mensagens (buffer)
        - memoria_sessao: lista com TODAS as mensagens da sess√£o
        - limite_curto_prazo: quantas mensagens guardar no buffer
    """
    
    def __init__(self, limite_curto_prazo: int = 10):
        """
        Inicializa o sistema de mem√≥ria.
        
        Args:
            limite_curto_prazo: n√∫mero m√°ximo de mensagens na mem√≥ria de curto prazo
        """
        # Mem√≥ria de curto prazo: s√≥ as √∫ltimas N mensagens
        self.memoria_curto_prazo: List[Dict] = []
        
        # Mem√≥ria de sess√£o: TODAS as mensagens (hist√≥rico completo)
        self.memoria_sessao: List[Dict] = []
        
        # Limite do buffer de curto prazo
        self.limite_curto_prazo = limite_curto_prazo
        
        print(f"‚úÖ Mem√≥ria iniciada (buffer de {limite_curto_prazo} mensagens)")
    
    
    def adicionar_mensagem(self, papel: str, conteudo: str):
        """
        Adiciona uma nova mensagem nas duas mem√≥rias.
        
        Args:
            papel: 'usuario' ou 'assistente'
            conteudo: o texto da mensagem
        """
        # Cria um dicion√°rio com a mensagem
        mensagem = {
            "papel": papel,
            "conteudo": conteudo,
            "timestamp": datetime.now().isoformat()
        }
        
        # 1) Adiciona na mem√≥ria de SESS√ÉO (hist√≥rico completo)
        self.memoria_sessao.append(mensagem)
        
        # 2) Adiciona na mem√≥ria de CURTO PRAZO (buffer limitado)
        self.memoria_curto_prazo.append(mensagem)
        
        # Se o buffer ficou maior que o limite, remove a mais antiga
        if len(self.memoria_curto_prazo) > self.limite_curto_prazo:
            mensagem_removida = self.memoria_curto_prazo.pop(0)  # Remove a primeira (mais antiga)
            print(f"üóëÔ∏è Buffer cheio! Removida mensagem antiga: '{mensagem_removida['conteudo'][:30]}...'")
    
    
    def obter_contexto_curto_prazo(self) -> str:
        """
        Retorna as √∫ltimas mensagens formatadas como texto.
        Isso ser√° enviado ao agente para dar contexto da conversa recente.
        
        Returns:
            String com as mensagens do buffer
        """
        if not self.memoria_curto_prazo:
            return "Nenhuma conversa recente."
        
        # Formata as mensagens de forma leg√≠vel
        contexto = "üìù **Hist√≥rico recente da conversa:**\n\n"
        for msg in self.memoria_curto_prazo:
            papel = "üë§ Usu√°rio" if msg["papel"] == "usuario" else "ü§ñ Assistente"
            contexto += f"{papel}: {msg['conteudo']}\n\n"
        
        return contexto
    
    
    def obter_historico_completo(self) -> List[Dict]:
        """
        Retorna todo o hist√≥rico da sess√£o.
        
        Returns:
            Lista com todas as mensagens
        """
        return self.memoria_sessao.copy()
    
    
    def limpar_buffer(self):
        """
        Limpa apenas a mem√≥ria de curto prazo (buffer).
        Mant√©m o hist√≥rico completo da sess√£o.
        """
        self.memoria_curto_prazo.clear()
        print("üóëÔ∏è Buffer de curto prazo limpo!")
    
    
    def limpar_tudo(self):
        """
        Limpa TODAS as mem√≥rias (reset completo).
        """
        self.memoria_curto_prazo.clear()
        self.memoria_sessao.clear()
        print("üóëÔ∏è Todas as mem√≥rias foram limpas!")
    
    
    def salvar_sessao(self, nome_arquivo: str = "sessao.json"):
        """
        Salva o hist√≥rico completo em um arquivo JSON.
        
        Args:
            nome_arquivo: nome do arquivo para salvar
        """
        try:
            with open(nome_arquivo, "w", encoding="utf-8") as f:
                json.dump(self.memoria_sessao, f, indent=2, ensure_ascii=False)
            print(f"üíæ Sess√£o salva em '{nome_arquivo}'!")
        except Exception as e:
            print(f"‚ùå Erro ao salvar sess√£o: {e}")
    
    
    def carregar_sessao(self, nome_arquivo: str = "sessao.json"):
        """
        Carrega um hist√≥rico de uma sess√£o anterior.
        
        Args:
            nome_arquivo: nome do arquivo para carregar
        """
        try:
            with open(nome_arquivo, "r", encoding="utf-8") as f:
                self.memoria_sessao = json.load(f)
            
            # Atualiza o buffer com as √∫ltimas N mensagens
            self.memoria_curto_prazo = self.memoria_sessao[-self.limite_curto_prazo:]
            
            print(f"üìÇ Sess√£o carregada de '{nome_arquivo}'!")
            print(f"   Total de mensagens: {len(self.memoria_sessao)}")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Arquivo '{nome_arquivo}' n√£o encontrado.")
        except Exception as e:
            print(f"‚ùå Erro ao carregar sess√£o: {e}")
    
    
    def mostrar_estatisticas(self):
        """
        Mostra estat√≠sticas sobre a mem√≥ria.
        """
        print("\nüìä **Estat√≠sticas da Mem√≥ria:**")
        print(f"   ‚Ä¢ Mensagens no buffer (curto prazo): {len(self.memoria_curto_prazo)}/{self.limite_curto_prazo}")
        print(f"   ‚Ä¢ Mensagens na sess√£o (total): {len(self.memoria_sessao)}")
        
        if self.memoria_sessao:
            usuario_msgs = sum(1 for m in self.memoria_sessao if m["papel"] == "usuario")
            assistente_msgs = sum(1 for m in self.memoria_sessao if m["papel"] == "assistente")
            print(f"   ‚Ä¢ Mensagens do usu√°rio: {usuario_msgs}")
            print(f"   ‚Ä¢ Mensagens do assistente: {assistente_msgs}")