"""
Interface Streamlit para o Agente de Reembolso
Com Sistema de Mem√≥ria (Curto Prazo + Sess√£o)
"""
import streamlit as st
import json
from datetime import datetime
from agente_reembolso import criar_agente, processar_pergunta  # type: ignore
from memoria import MemoriaAgente  # type: ignore

# ========================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ========================================

st.set_page_config(
    page_title="Assistente de Reembolso",
    page_icon="üí∞",
    layout="centered"
)

# ========================================
# T√çTULO E DESCRI√á√ÉO
# ========================================

st.title("üí∞ Assistente de Reembolso")
st.markdown("Ol√°! Sou seu assistente virtual. Pergunte sobre a pol√≠tica de reembolso!")

# ========================================
# BARRA LATERAL (SIDEBAR)
# ========================================

with st.sidebar:
    st.header("‚ÑπÔ∏è Como usar")
    st.markdown("""
    **Voc√™ pode perguntar:**
    - Qual o prazo para pedir reembolso?
    - Como funciona o reembolso por defeito?
    - Calcule reembolso de R$ 500
    - Preciso de nota fiscal?
    
    **O agente tem:**
    - ‚úÖ Mem√≥ria de curto prazo (√∫ltimas 10 msgs)
    - ‚úÖ Hist√≥rico completo da sess√£o
    - ‚úÖ RAG com base de conhecimento
    """)
    
    st.divider()
    
    # Mostra estat√≠sticas da mem√≥ria
    if "memoria" in st.session_state:
        st.subheader("üìä Estat√≠sticas")
        memoria = st.session_state.memoria
        st.metric("Buffer", f"{len(memoria.memoria_curto_prazo)}")
        st.metric("Sess√£o", len(memoria.memoria_sessao))
    
    st.divider()
    
    # Bot√£o para limpar conversa
    if st.button("üóëÔ∏è Limpar Conversa"):
        st.session_state.mensagens = []
        if "memoria" in st.session_state:
            st.session_state.memoria.limpar_tudo()
        st.rerun()
    
    # Bot√£o para baixar sess√£o
    if st.button("üì• Baixar Sess√£o"):
        if "memoria" in st.session_state:
            historico = st.session_state.memoria.obter_historico_completo()
            sessao_json = json.dumps(historico, indent=2, ensure_ascii=False)
            st.download_button(
                label="‚¨áÔ∏è Clique para baixar",
                data=sessao_json,
                file_name=f"sessao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

# ========================================
# INICIALIZAR O AGENTE E MEM√ìRIA
# ========================================

# Inicializa a lista de mensagens (mem√≥ria da conversa)
if "mensagens" not in st.session_state:
    st.session_state.mensagens = []

# Inicializa a mem√≥ria do agente
if "memoria" not in st.session_state:
    st.session_state.memoria = MemoriaAgente(limite_curto_prazo=10)

# Fun√ß√£o para criar o agente com cache (para evitar recria√ß√£o desnecess√°ria)
@st.cache_resource
def criar_agente_cache():
    return criar_agente()

# Cria o agente (s√≥ uma vez)
if "agente" not in st.session_state:
    with st.spinner("Iniciando assistente..."):
        try:
            st.session_state.agente = criar_agente()
            st.success("‚úÖ Assistente pronto!", icon="ü§ñ")
        except Exception as e:
            st.error(f"‚ùå Erro ao criar agente: {str(e)}")
            st.stop()

# ========================================
# MOSTRAR HIST√ìRICO DE MENSAGENS
# ========================================

for msg in st.session_state.mensagens:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# ========================================
# CAMPO DE INPUT DO USU√ÅRIO
# ========================================

if pergunta := st.chat_input("Digite sua pergunta aqui..."):
    
    # Adiciona a pergunta do usu√°rio ao hist√≥rico
    st.session_state.mensagens.append({
        "role": "user",
        "content": pergunta
    })
    
    # Mostra a pergunta do usu√°rio
    with st.chat_message("user"):
        st.markdown(pergunta)
    
    # Processa e mostra a resposta do agente
    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            try:
                # Chama o agente COM MEM√ìRIA para processar a pergunta
                resposta = processar_pergunta(
                    st.session_state.agente, 
                    pergunta,
                    memoria=st.session_state.memoria  # Passa a mem√≥ria!
                )
                
                # Mostra a resposta
                st.markdown(resposta)
                
                # Adiciona resposta ao hist√≥rico visual
                st.session_state.mensagens.append({
                    "role": "assistant",
                    "content": resposta
                })
                
            except Exception as e:
                st.error(f"‚ùå Erro: {str(e)}")

# ========================================
# RODAP√â
# ========================================

st.divider()
st.caption("ü§ñ Assistente com Mem√≥ria | Agno + Streamlit | RAG + Knowledge Base")
